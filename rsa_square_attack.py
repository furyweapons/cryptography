import math

def isSquare(x):
    # Check http://burningmath.blogspot.be/2013/09/how-to-check-if-number-is-perfect-square.html 
    # for the criteria that led to this code.
    # The idea is that checking whether a number is a perfect square is an expensive operation
    # and should only be done when basic criteria indicate that the number could be a perfect square.
    # Note that the term "digital root" is identical to the remainder when dividing by 9
    if x == 1:
        return True
    if x%9 in [2,3,5,6,8]:
        return False
    finalDigit = x%10
    if finalDigit in [2,3,7,8]:
        return False
    final2Digits = x%100
    final2Digit = final2Digits//10
    if finalDigit == 6:
        if final2Digit in [0,2,4,6,8]:
            return False
    else:
        if final2Digit in [1,3,5,7,9]:
            return False
    if finalDigit == 5:
        if final2Digit != 2:
            return False
    if finalDigit == 0:
        if final2Digit != 0:
            return False    
    if finalDigit in [0,2,4,6,8]:
        if final2Digits%4 != 0:
            final3Digits = x%1000
            if final3Digits%8 != 4:
                return False
    if finalDigit in [1,3,5,7,9]:
        final3Digits = x%1000
        if final3Digits%8 != 1:
            return False    
    low = 0
    high = x // 2
    root = high
    while root * root != x:
        root = (low + high) // 2
        if low + 1 >= high:
            return False
        if root * root > x:
            high = root
        else:
            low = root
    return True

def highSquare(x):
    # returns the integer higher than the square root
    # this function should only be used for x=p*q
    # so, when we are certain that x is not a perfect square
    if x == 1:
        return True
    low = 0
    high = x // 2
    root = high
    while root * root != x:
        root = (low + high) // 2
        if low + 1 >= high:
            return low+1
        if root * root > x:
            high = root
        else:
            low = root
    return low+1

def lowSquare(x):
    # returns the integer lower than or equal to the square root
    if x == 1:
        return True
    low = 0
    high = x // 2
    root = high
    while root * root != x:
        root = (low + high) // 2
        if low + 1 >= high:
            return low
        if root * root > x:
            high = root
        else:
            low = root
    return low

def factor(n):
    x = highSquare(n)
    max = 2*x
    i = 0
    bl = 0
    while x<max:
        i = i + 1
        nbl = i.bit_length()
        if nbl != bl:
            bl = nbl
            basis = pow(2,bl)
            step = basis//10
            if step < 1:
                step = 1
        if i%step == 0:
            print ("trial ", i," x = ", x)
        sq = x**2 - n
        # sqr = int(math.sqrt(sq)+0.5)
        # sqr = lowSquare(sq)
        # if sqr**2 = sq:
        if isSquare(sq):
            y = lowSquare(sq)
            q = x + y
            p = x - y
            return p,q
        else:
            x = x + 1
    return 0,0

if __name__ == '__main__':
    import primes
    import time
    
    distance = pow(2,522)
    p = primes.findAPrime(pow(2,1023),pow(2,1024))
    q = primes.findAPrime(p+distance,p+2*distance)
    n = p*q
    
    #distance = pow(2,1034)
    #p = primes.findAPrime(pow(2,2047),pow(2,2048))
    #q = primes.findAPrime(p+distance,p+2*distance)
    #n = p*q    
    
    t0= time.time()
    print ("start factorization")
    
    #n = 3366502043033
    #n = 26121310685428846102678235361188744796363857735420828439242201414390161488470284219367747398947597713959826702054663090748847095978595491922593943221833431538637171812854714415271267059742957922807862753600529366119834766694597853559861795396511116739081218201833708231052352269674552332028904508161691917141428351490846524625017611696950159621776683409917817186013540405309776851734117677109655660770881889551011914697654014678251356635549478714453353909070176889816513361890020340777156297813481952089442560875351010604944229634055037041188429907296204638317095296968612615685696318362724997716822909106631
    #n = 65817591079506596030959079652411737742255895814146293752350148985827090219483023712459018067733569890228407105772512775397640276832960261231935995764564210929051854801484903915870044772740676099537729256567331250545554986251296256148907260360540131296541333678723925912205075795242886682301816801229041
    #n = 65817591079506596030959079652411737742255895814146293752350148985827090219483023712459018067733569890228407105772512775397640276832960261231935997098260535383897543251476152364062135465215319677792985578286721885295563048986710732798227725228431883352804953445655585791285134169148786787397176735852283
    #n = 65817591079506596030959079652411737742255895814146293752350148985827090219483023712459018067733569890228407105772512775397640276832960261231937263566064859362218852708796486646244525940016485901513842768522610586090653816965098588668179898075801518018454291603829871176618985476311999373933122121523309
    #n = 65817591079506596030959079652411737742255895814146293752350148985827090219483023712459018067733569890228407105772512775406055339252579449594683000915472408596449386598771540438408253508922519536958938247974173415305127261628746632413825536639515566955582832907441681720302777029607620471494290054046879
    #n = 9073352560302807768704637774731144179226925199674247875558835553449209899993767560356865744948236984441605604253358664215810710801092291231871846993159932107728721401449580505689440488885144828098872871041651581468901866852235652916242904452469525142900517468822533226280660185950609185352504443664271
    #n = 27476138281022007983833712096051133854896228165456445811065335774656732633496335841264736913491553767516691350391831401282067046729321323557401442277368566694634724219778066502443975125606943303671616840736502896453468289871834718568170974597059649646443105708129592239651195820402775269319913272272148943266039399423275841293171735833553722464372864217474386592819257160319075954780141592991866960611452744676602300718641773636438327878838785912339438665475828584568336558666304786099053424362765925398458224455918915032989237400571577473431446610759142073018106418438829660573362869885468526494213305623271
    #n = 412023436986659543855531365332575948179811699844327982845455626433876445565248426198098870423161841879261420247188869492560931776375033421130982397485150944909106910269861031862704114880866970564902903653658867433731720813104105190864254793282601391257624033946373269391
    #n = 188198812920607963838697239461650439807163563379417382700763356422988859715234665485319060606504743045317388011303396716199692321205734031879550656996221305168759307650257059
    p_found,q_found = factor(n)
    t1 = time.time()
    print ("n = ", n)
    print ("p = ", p_found)
    print ("q = ", q_found)
    print ("bit-length = ", n.bit_length())
    print ("factorization time =", t1-t0, " seconds")
    # print ("p = ", p)
    # print ("q = ", q)
